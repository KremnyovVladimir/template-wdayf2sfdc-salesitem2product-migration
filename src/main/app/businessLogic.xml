<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:wd-revenue="http://www.mulesoft.org/schema/mule/wd-revenue"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	version="EE-3.7.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/wd-revenue http://www.mulesoft.org/schema/mule/wd-revenue/current/mule-wd-revenue.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">

    <batch:job name="migrateProductsBatch" max-failed-records="-1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <wd-revenue:get-sales-items config-ref="Workday_Revenue_Management" getSalesItemsRequest-ref="#[new com.workday.revenue.GetSalesItemsRequestType()]" doc:name="Get sales items from Workday instance"/>
            <set-payload value="#[payload == null ? null : payload.responseData.salesItem]" doc:name="Retrieve Workday data"/>

        </batch:input>
 
        <batch:process-records>

            <batch:step name="getProductInSalesforceStep">
                <batch:set-record-variable variableName="UnitPrice" value="#[payload.salesItemData.itemUnitPrice]" doc:name="Save data for UnitPrice in record variable"/>
                <dw:transform-message doc:name="GetSalesItemsResponseType To Map">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
	Description: payload.salesItemData.itemDescription,
	IsActive: (not payload.salesItemData.inactive) default false,
	Name: payload.salesItemData.itemName,
	ProductCode: payload.salesItemData.itemIdentifier
}]]]></dw:set-payload>
                </dw:transform-message>
                <enricher source="#[payload == null ? null : payload.Id]" target="#[payload[0].Id]" doc:name="enrich payload with Product Id">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id FROM Product2 WHERE Name = '#[payload[0]['Name']]'" doc:name="Query Product in Salesforce instance"/>


                </enricher>
 
            </batch:step>
            

            <batch:step name="upsertProductInSalesforceStep" filter-expression="#[payload == null]">

                <logger message="Product to upsert: #[payload]" level="INFO" doc:name="Log Product to upsert"/>
                <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="Product2" doc:name="Upsert Product in Salesforce">
                    <sfdc:objects ref="#[payload]"/>
                </sfdc:upsert>
                <dw:transform-message doc:name="Map Result to array of Product2Ids">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	Product2Id: $.id
}]]></dw:set-payload>
                </dw:transform-message>


            </batch:step>
            <batch:step name="callUpsertPricebookEntryFlow">
                <flow-ref name="upsertPricebookEntryFlow" doc:name="Call upsertPricebookEntryFlow"/>
            </batch:step>            
            
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                	<parse-template location="./src/main/resources/email/body.html" doc:name="Parse Template"/>
					<smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="Send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
    <sub-flow name="upsertPricebookEntryFlow">
                <enricher source="#[payload == null ? null : payload.Id]" target="#[payload[0].pricebookId]" doc:name="enrich payload with Pricebook Id">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id FROM PriceBookEntry WHERE Product2Id = '#[payload[0].Product2Id]'" doc:name="Query PriceBookEntry in Salesforce instance"/>
                </enricher>
        <choice doc:name="Choice">
            <when expression="payload[0].pricebookId != null">
                <dw:transform-message doc:name="Map To PricebookEntry update format">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
	Id: payload[0].pricebookId,
	UnitPrice: recordVars.UnitPrice as :string {class: "java.lang.String"}
}]]]></dw:set-payload>
                </dw:transform-message>
                    <logger message="PricebookEntry to update: #[payload]" level="INFO" doc:name="Log PricebookEntry to update"/>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Map To PricebookEntry create format">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
	Product2Id: payload[0].Product2Id,
	UnitPrice: recordVars.UnitPrice as :string {class: "java.lang.String"},
	IsActive: true,
	UseStandardPrice: false,
	Pricebook2Id: p('sfdc.integration.pricebook2Id')
}]]]></dw:set-payload>
                </dw:transform-message>
                    <logger message="PricebookEntry to create: #[payload]" level="INFO" doc:name="Log PricebookEntry to create"/>
            </otherwise>
        </choice>

                <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="PricebookEntry" doc:name="Upsert Pricebook entry in Salesforce instance">
                    <sfdc:objects ref="#[payload]"/>
                </sfdc:upsert>
    </sub-flow>
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Kick business logic.
This flow should control the direction of the application, and it should be called by the different endpoints that your Kick exposes to trigger it.">
        <batch:execute name="migrateProductsBatch" doc:name="MigrateProductsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>   
    
</mule>
